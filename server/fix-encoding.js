const { Pool } = require('pg');
require('dotenv').config();

const pool = new Pool({
  host: process.env.DB_HOST,
  port: parseInt(process.env.DB_PORT),
  database: process.env.DB_NAME,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  ssl: process.env.DB_HOST?.includes('railway') ? { rejectUnauthorized: false } : false,
  client_encoding: 'UTF8',
});

// Mapeo de correcciones comunes para nombres mexicanos
const CORRECTIONS = {
  // P√©rez
  'P??rez': 'P√©rez',
  'PÔøΩrez': 'P√©rez',
  // Garc√≠a  
  'Garc??a': 'Garc√≠a',
  'GarcÔøΩa': 'Garc√≠a',
  // Mar√≠a
  'Mar??a': 'Mar√≠a',
  'MarÔøΩa': 'Mar√≠a',
  // Gonz√°lez
  'Gonz??lez': 'Gonz√°lez',
  'GonzÔøΩlez': 'Gonz√°lez',
  // L√≥pez
  'L??pez': 'L√≥pez',
  'LÔøΩpez': 'L√≥pez',
  // Rodr√≠guez
  'Rodr??guez': 'Rodr√≠guez',
  'RodrÔøΩguez': 'Rodr√≠guez',
  // M√©ndez
  'M??ndez': 'M√©ndez',
  'MÔøΩndez': 'M√©ndez',
  // Mart√≠nez
  'Mart??nez': 'Mart√≠nez',
  'MartÔøΩnez': 'Mart√≠nez',
  // Hern√°ndez
  'Hern??ndez': 'Hern√°ndez',
  'HernÔøΩndez': 'Hern√°ndez',
  // Ram√≠rez
  'Ram??rez': 'Ram√≠rez',
  'RamÔøΩrez': 'Ram√≠rez',
  // S√°nchez
  'S??nchez': 'S√°nchez',
  'SÔøΩnchez': 'S√°nchez',
  // Jos√©
  'Jos??': 'Jos√©',
  'JosÔøΩ': 'Jos√©',
  // √Ångel
  '??ngel': '√Ångel',
  'ÔøΩngel': '√Ångel',
  // Jes√∫s
  'Jes??s': 'Jes√∫s',
  'JesÔøΩs': 'Jes√∫s',
  // Andr√©s
  'Andr??s': 'Andr√©s',
  'AndrÔøΩs': 'Andr√©s',
  // V√≠ctor
  'V??ctor': 'V√≠ctor',
  'VÔøΩctor': 'V√≠ctor',
  // M√≥nica
  'M??nica': 'M√≥nica',
  'MÔøΩnica': 'M√≥nica',
  // Sof√≠a
  'Sof??a': 'Sof√≠a',
  'SofÔøΩa': 'Sof√≠a',
  // Adri√°n
  'Adri??n': 'Adri√°n',
  'AdriÔøΩn': 'Adri√°n',
  // Com√∫n para m√∫ltiples acentos
  '??': '√°',
  '??': '√©', 
  '??': '√≠',
  '??': '√≥',
  '??': '√∫',
  '??': '√±',
  '??': '√Å',
  '??': '√â',
  '??': '√ç', 
  '??': '√ì',
  '??': '√ö',
  '??': '√ë'
};

async function fixCustomerNames() {
  const client = await pool.connect();
  
  try {
    console.log('üîß Iniciando correcci√≥n de nombres con acentos...\n');
    
    // Obtener todos los clientes con problemas de encoding
    const customersResult = await client.query(`
      SELECT customer_id, nombre, telefono 
      FROM customers 
      WHERE nombre LIKE '%??%' OR nombre LIKE '%ÔøΩ%'
      ORDER BY customer_id
    `);
    
    console.log(`üìã Encontrados ${customersResult.rows.length} clientes con problemas de encoding:\n`);
    
    let correctedCount = 0;
    
    for (const customer of customersResult.rows) {
      let originalName = customer.nombre;
      let correctedName = originalName;
      
      // Aplicar todas las correcciones
      for (const [wrong, correct] of Object.entries(CORRECTIONS)) {
        // Escapar caracteres especiales de regex
        const escapedWrong = wrong.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
        correctedName = correctedName.replace(new RegExp(escapedWrong, 'g'), correct);
      }
      
      // Si el nombre cambi√≥, actualizarlo
      if (correctedName !== originalName) {
        await client.query(
          'UPDATE customers SET nombre = $1 WHERE customer_id = $2',
          [correctedName, customer.customer_id]
        );
        
        console.log(`‚úÖ [ID: ${customer.customer_id}] "${originalName}" ‚Üí "${correctedName}"`);
        correctedCount++;
      } else {
        console.log(`‚ö†Ô∏è  [ID: ${customer.customer_id}] "${originalName}" - No se pudo corregir autom√°ticamente`);
      }
    }
    
    console.log(`\nüéâ Correcci√≥n completada: ${correctedCount} nombres actualizados`);
    
    // Mostrar algunos ejemplos despu√©s de la correcci√≥n
    console.log('\nüìã Verificando correcciones...');
    const verifyResult = await client.query(`
      SELECT customer_id, nombre, telefono 
      FROM customers 
      ORDER BY customer_id 
      LIMIT 5
    `);
    
    console.log('\nPrimeros 5 clientes despu√©s de la correcci√≥n:');
    verifyResult.rows.forEach((customer, index) => {
      console.log(`${index + 1}. [ID: ${customer.customer_id}] ${customer.nombre} - ${customer.telefono}`);
    });
    
  } catch (error) {
    console.error('‚ùå Error durante la correcci√≥n:', error);
  } finally {
    client.release();
    await pool.end();
  }
}

fixCustomerNames();